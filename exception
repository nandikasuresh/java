1. Write a program for example of try and catch block. In this check whether the given array size
is negative or not.
public class NegativeArraySizeExample {
public static void main(String[] args) {
try{
int [] arr=new int[-3];
}catch (NegativeArraySizeException nase){
System.out.println(nase);
}
}
}
Output:
2. Write a program for example of multiple catch statements occurring in a program.
public class MultipleCatchExample {
public static void main(String[] args) {
try{
int [] arr=new int[5];
arr[5]=30;
arr[4]=30/0;
}catch(ArithmeticException ae){
System.out.println("Arithmetic exception");
}catch (ArrayIndexOutOfBoundsException aie){
System.out.println("Array Index out of bounds");
}catch (Exception e){
System.out.println("Exception");
}
}
}
Output:
3. Write a program to illustrate sub class exception precedence over base class.
import java.io.*;
class Parent{
void method(){
System.out.println("Parent method");
}
void method1()throws Exception{
System.out.println("Parent method1");
}
}
class Child extends Parent{
void method() throws ArrayIndexOutOfBoundsException{
System.out.println("Child Method");
}
@Override
void method1() throws ArithmeticException {
System.out.println("child method1");
}
}
public class SubClassParentClassExceptionExample {
public static void main(String[] args) {
Parent p=new Child();
p.method();
try {
p.method1();
}
catch(Exception e) {
System.out.println(e);
}
}
}
Output:
4. Write a program to do division of two numbers. Make function called doDivision( )
to do division of two numbers. During the division process if runtime error may occur throw
error to calling function. Handle ArithmeticException, ArrayIndexOutofBoundsException,
NumberFormatException in main( ) method only.
class DoDivision{
float division(int a,int b) throws Exception{
return a/b;
}
}
public class DoDivisionExample {
public static void main(String[] args){
DoDivision d=new DoDivision();
try{
float value=d.division(2,0);
int []arr=new int[3];
arr[3]=3;
} catch (ArithmeticException ae){
System.out.println("Arithmetic Exception");
}catch (ArrayIndexOutOfBoundsException aie){
System.out.println("Array index out of Bounds");
}catch (NumberFormatException ne){
System.out.println("Number format Exception");
}catch (Exception e){
System.out.println(e);
}
}
}
Output:
5. Write a program in Java to display name and roll number of students. Initialize respective
array variables for 10 students. Handle ArrayIndexOutOfBoundsExeption, so that any such
problem doesn’t cause illegal termination of program.
public class StudentRollNoExample {
public static void main(String[] args) {
String [] name={"Ak","sh","it","h","mo","ha","mm","e","d","M"};
String []
rollNo={"21pw01","21pw02","21pw03","21pw04","21pw05","21pw06","21pw07","21pw0
8","21pw09","21pw10"};
try{
System.out.println(name[9]);
System.out.println(rollNo[12]);
}catch (ArrayIndexOutOfBoundsException ae){
System.out.println(ae);
}
}
}
Output:
6. Create a user-defined exception class called “NoMatchException” using extends keyword.
Write a constructor for this class that takes a string argument and stores it inside the object
with a string handle. Write a method that prints out the stored string. Create a try-catch clause
to exercise the created exception when a user entered string is not equal to “India”;
import java.util.*;
class NoMatchException extends Exception{
public String handle;
NoMatchException(String word){
handle=word;
}
void printString(){
System.out.println(handle);
}
}
public class NoMatchExceptionExample {
public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
try{
String inputString=sc.next();
if(!inputString.equals("india")){
throw new NoMatchException("This is not a valid String!");
}
}catch (NoMatchException ne){
ne.printString();
}
}
}
Output:
7. Write an application that displays a series of at least five student ID numbers (that you have
stored in an array) and asks the user to enter a numeric test score for the student. Create a
ScoreException class, and throw a ScoreException for the class if the user does not enter a
valid score (less than or equal to 100). Catch the ScoreException, display an appropriate
message, and then store a 0 for the student’s score. At the end of the application, display all
the student IDs and scores.
import java.util.*;
class ScoreException extends Exception{
ScoreException(){
super();
}
}
public class ScoreExceptionExample {
public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
String []arr={"Akshith","Nayeem","Jenisa","Meena","Mohamed"};
int [] score=new int[5];
try{
for (int i = 0; i < arr.length; i++) {
System.out.println("Enter the test score for "+arr[i]);
int m=sc.nextInt();
if(m<=100){
score[i]=m;
}else{
score[i]=0;
throw new ScoreException();
}
}
}catch (ScoreException se){
System.out.println("Invalid score Entered!");
}
}
}
Output:
8. A typical requirement of a custom exception called “WeakPasswordException” would be for
validation purposes. In this exercise, Let's validate a password input. A password is said to be
strong if it satisfies the following criteria
i) It should be a minimum of 10 characters and a maximum of 20 characters.
ii) It should contain at least one digit.
iii) It should contain at least one special character (non-numeric,
non-alphabetic). iv) It should contain at least one letter.
If the password fails any one of the criteria, it is considered as weak.
import java.util.*;
class WeakPasswordException extends Exception{
WeakPasswordException(){
super();
}
}
public class WeakPasswordExceptionExample {
public static void main(String[] args) {
try{
Scanner sc=new Scanner(System.in);
String password=sc.next();
char []arr=password.toCharArray();
if(password.length()<10 || password.length()>20){
throw new WeakPasswordException();
}
int digitCount=0;
int sCharCount=0;
int letterCount=0;
for (int i = 0; i < password.length(); i++) {
if(Character.isDigit(arr[i])){
digitCount+=1;
} else if (arr[i]>=33 && arr[i]<=38) {
sCharCount+=1;
}else if((arr[i]>=65 && arr[i]<=90)||(arr[i]>=97 &&
arr[i]<=122)){
letterCount+=1;
}
}
if (digitCount<1 || sCharCount<1 ||letterCount<1) {
throw new WeakPasswordException();
}
}catch(WeakPasswordException we){
System.out.println("Weak password Entered!");
}
}
}
